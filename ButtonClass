import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.UIManager;

public class ButtonClass extends JButton
{	
	private static final Font smallFont = new Font("Verdana", Font.BOLD, 24);
	private static final Color numbersBgColor = new Color(48, 50, 52);
	private static final Color specialBgColor = new Color(175, 143, 233);
	
	private String text;
	private float alphaValue;
	private Clip sound;

	public void setOpacity(float opacity) 
	{
		this.setBackground(
				new Color(
				(float)this.getBackground().getRed() / 255, 
				(float)this.getBackground().getGreen() / 255, 
				(float)this.getBackground().getBlue() / 255,
				opacity));
		
		MainClass.buttonPanel.repaint();
	}
	 
	ButtonClass(String name)
	{
		this.text = name;
		this.setText(text);
		this.setFont(ButtonClass.smallFont);
		UIManager.getDefaults().put("Button.disabledText",Color.WHITE);
		this.setEnabled(false);
		// assigns a sound effect to the button
		this.createSoundFile();
		
		try
		{
			Integer.parseInt(text);
			
			this.setBackground(ButtonClass.numbersBgColor);
			alphaValue = 0.4f;
		}
		catch(Exception e)
		{
			if(text.equals("=") || text.equals("mode") || text.equals("deg") || text.equals("2nd"))
			{
				this.setBackground(new Color(255, 140, 0));
				alphaValue = 0.8f;
			}
			else
			{
				this.setBackground(ButtonClass.specialBgColor);
				alphaValue = 0.3f;
			}
		}
		
		this.setOpacity(alphaValue);
		this.setBorder(BorderFactory.createLoweredBevelBorder());
		
		
		this.addMouseListener(new MouseAdapter() 
		{
		    public void mouseEntered(MouseEvent evt) 
		    {
		    	setBorder(BorderFactory.createLineBorder(Color.WHITE));
		    	setOpacity(alphaValue + 0.2f);
		    }

		    public void mouseExited(MouseEvent evt) 
		    {
		    	setBorder(BorderFactory.createLoweredBevelBorder());
		    	setOpacity(alphaValue);
		    }
		    
		    @Override
            public void mousePressed(MouseEvent arg0) {
                if (arg0.getButton() == MouseEvent.BUTTON1){
                	switch(getText())
                	{
                		case "deg":
                			text = "rad";
                			setText(text);
                			createSoundFile();
                			MainClass.updateForButtons(text);
                		break;
                			
                		case "rad":
                			text = "deg";
                			setText(text);
                			createSoundFile();
                			MainClass.updateForButtons(text);
                		break;
                		
                		default:
                			MainClass.updateForButtons(text);
                	}
                		MainClass.buttonPanel.repaint();
                	
                } else if (arg0.getButton() == MouseEvent.BUTTON3) { // plays a sound effect after the user right-clicks a button in accessibility mode

                	if(Intro.getAccessibilityMode())
                	{
                		sound.start(); // play the sound
 				       	sound.setFramePosition(0); // rewind to the beginning
                	}
                } 
            }
		});
	}
	
	// creates a soundFile specific to the button
	@SuppressWarnings("preview")
	private void createSoundFile()
	{
		String soundFile = Intro.getFilePath() + switch(text)
		{
			case "1":
				yield "one";
				
			case "2":
				yield "two";
				
			case "3":
				yield "three";
				
			case "4":
				yield "four";
				
			case "5":
				yield "five";
				
			case "6":
				yield "six";
			
			case "7":
				yield "seven";
				
			case "8":
				yield "eight";
				
			case "9":
				yield "nine";
				
			case "0":
				yield "zero";
				
			case ".":
				yield "point";
				
			case "C":
				yield "clear";
				
			case "DEL":
				yield "delete";
				
			case "EXP":
				yield "exp";
				
			case "e":
				yield "e_small";
				
			case "x^y":
				yield "power";
				
			case "√":
				yield "sqrt";
				
			case "mode":
				yield "mode";
				
			case "(":
				yield "open_bracket";
			
			case ")":
				yield "closed_bracket";
				
			case "sin":
				yield "sin";
				
			case "cos":
				yield "cos";
				
			case "tan":
				yield "tan";
				
			case "x!":
				yield "factorial";
				
			case "|x|":
				yield "abs";
				
			case "ln(x)":
				yield "lnx";
				
			case "lg(x)":
				yield "logx";
				
			case "π":
				yield "pi";
				
			case "deg":
				yield "degrees";
				
			case "rad":
				yield "radians";
				
			case "2nd":
				yield "2nd";
				
			case "x":
				yield "multiply";
				
			case "÷":
				yield "divide";
			
			case "+":
				yield "plus";
				
			case "-":
				yield "minus";
				
			case "=":
				yield "equals";
				
			default:
				yield "zero";
		};
		
		soundFile += ".wav";
		
		try
		{
			sound = AudioSystem.getClip();
			AudioInputStream ais = AudioSystem.getAudioInputStream(new File(soundFile));
			sound.open(ais);
		}
		catch (Exception e)
		{
			e.printStackTrace();
			System.out.println(getClass() + ": Failed to load a soundfile at the adress of " + soundFile);
		}
	}
	
	
	public JComponent getButton()
	{
		return this;
	}
}
