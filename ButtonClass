import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.UIManager;

public class ButtonClass extends JButton
{	
	private static final Font smallFont = new Font("Verdana", Font.BOLD, 20);
	private static final Color numbersBgColor = new Color(48, 50, 52);
	private static final Color specialBgColor = new Color(175, 143, 233);
	private String text;
	/*
	private final static String[] numbers = {"zero","one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten",
			"eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", 
			"twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety",
			"hundred", "thousand", "million", "billion", "trillion", "point"};
			*/
	private float alphaValue;
	private Thread thread;
	private String soundFile;
	private Clip sound;
	
	@SuppressWarnings("preview")
	private void createSoundFile()
	{
		/*
		 * {"2nd", "sin", "cos", "tan", "π"}, 
			{"deg", "ln(x)", "lg(x)", "(", ")"},
			{"EXP", "C", "DEL", "√", "÷"},
			{"x^y", "7", "8", "9", "x"}, 
			{"|x|", "4", "5", "6", "-"}, 
			{"x!", "1", "2", "3", "+"}, 
			{"mode", "e", "0", ".", "="}};
		 */
		
		
		soundFile = "C:\\eclipse proj\\GUICalculator\\sound\\" + switch(text)
		{
			case "1":
				yield "one";
				
			case "2":
				yield "two";
			
			default:
				yield "zero";
		};
		
		soundFile += ".wav";
	}
	
	private void createSound()
	{
		try
		{
			sound = AudioSystem.getClip();
			AudioInputStream ais = AudioSystem.getAudioInputStream(new File(soundFile));
			sound.open(ais);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	

	public void setOpacity(float opacity) 
	{
		this.setBackground(
				new Color(
				(float)this.getBackground().getRed() / 255, 
				(float)this.getBackground().getGreen() / 255, 
				(float)this.getBackground().getBlue() / 255,
				opacity));
		
		MainClass.buttonPanel.repaint();
	}
	 
	ButtonClass(String name)
	{
		this.text = name;
		this.setText(text);
		this.setFont(ButtonClass.smallFont);
		UIManager.getDefaults().put("Button.disabledText",Color.WHITE);
		this.setEnabled(false);
		this.createSoundFile();
		this.createSound();
		
		try
		{
			Integer.parseInt(text);
			
			this.setBackground(ButtonClass.numbersBgColor);
			alphaValue = 0.4f;
		}
		catch(Exception e)
		{
			if(text.equals("=") || text.equals("mode") || text.equals("deg") || text.equals("2nd"))
			{
				this.setBackground(new Color(255, 140, 0));
				alphaValue = 0.8f;
			}
			else
			{
				this.setBackground(ButtonClass.specialBgColor);
				alphaValue = 0.3f;
			}
		}
		
		this.setOpacity(alphaValue);
		this.setBorder(BorderFactory.createLoweredBevelBorder());
		
		
		this.addMouseListener(new MouseAdapter() 
		{
		    public void mouseEntered(MouseEvent evt) 
		    {
		    	setBorder(BorderFactory.createLineBorder(Color.WHITE));
		    	setOpacity(alphaValue + 0.2f);
		    }

		    public void mouseExited(MouseEvent evt) 
		    {
		    	setBorder(BorderFactory.createLoweredBevelBorder());
		    	setOpacity(alphaValue);
		    }
		    
		    @Override
            public void mousePressed(MouseEvent arg0) {
                if (arg0.getButton() == MouseEvent.BUTTON1){
                	switch(getText())
                	{
                		case "deg":
                			setText(text);
                			MainClass.updateForButtons(text);
                		break;
                			
                		case "rad":
                			setText(text);
                			MainClass.updateForButtons(text);
                		break;
                		
                		default:
                			MainClass.updateForButtons(text);
                	}
                		MainClass.buttonPanel.repaint();
                	
                } else if (arg0.getButton() == MouseEvent.BUTTON3) {
                	// starts a thread that plays a sound effect after one second of the user entering a button
    		    	thread = new Thread(){
    		    		@Override
    		    	    public void run(){
    		    			try {   
    					       sound.start(); // play the sound
    					       sound.setFramePosition(0); // rewind to the beginning
    						} catch (Exception e) {

    						}
    		    	    }
    		    	  };
    		    	thread.start();
                } 
            }
		});
	}
	
	public JComponent getButton()
	{
		return this;
	}
}
