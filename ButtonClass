import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.DefaultButtonModel;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.plaf.metal.MetalButtonUI;

public class ButtonClass extends JButton
{	
	private static final Font smallFont = new Font("Verdana", Font.BOLD, 20);
	private static final Color numbersBgColor = Color.WHITE;//new Color(48, 50, 52)
	private static final Color specialBgColor = new Color(175, 143, 233);
	private static final Color borderColor = new Color(8, 2, 36);
	/* TODO
	 * Set different background colors depending on the button
	 * 
	*/
	
	
	public void setOpacity(float opacity) 
	{
		this.setBackground(
				new Color(
				(float)this.getBackground().getRed() / 255, 
				(float)this.getBackground().getGreen() / 255, 
				(float)this.getBackground().getBlue() / 255,
				opacity));
		
		this.revalidate();
		this.repaint();
		MainClass.buttonPanel.revalidate();
	    MainClass.buttonPanel.repaint();
	}

	
	/*
	@Override
	public void paint(Graphics g) 
	{   
		Graphics2D g2 = (Graphics2D) g.create();
	    g2.setColor(ButtonClass.numbersBgColor);
	    super.paint(g2);
	    g2.dispose();
	    MainClass.buttonPanel.repaint();
	}
*/

	/*
	@Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (isSelected()) {
            setBorder(BorderFactory.createEmptyBorder());
        } else {
            setBorder(BorderFactory.createLoweredBevelBorder());
        }
    }
	*/
	
	ButtonClass(String text)
	{
		this.setText(text);
		
		this.setFont(ButtonClass.smallFont);
		this.setForeground(Color.WHITE);
		this.setFocusPainted(false);
		this.setFocusable(false);
		this.setRolloverEnabled(false);
		this.setModel(new DefaultButtonModel()
		{
			@Override
	        public boolean isPressed() {
	            return false;
	        }

	        @Override
	        public boolean isRollover() {
	            return false;
	        }
	        
	        @Override
	        public void setRollover(boolean b) {
	            //NOOP
	        }
		});
		
		this.setUI (new MetalButtonUI () {
			@Override
		    protected void paintButtonPressed (Graphics g, AbstractButton b) { }
		});
		
		try
		{
			Integer.parseInt(text);
			this.setBackground(ButtonClass.numbersBgColor);
		}
		catch(Exception e)
		{
			if(text.equals("=") || text.equals("mode"))
				this.setBackground(new Color(255, 140, 0));//new Color(237, 171, 239)
			else
				this.setBackground(ButtonClass.specialBgColor);
		}
		
		this.setBorder(BorderFactory.createLoweredBevelBorder()); //BorderFactory.createLineBorder(ButtonClass.borderColor)
		
		this.addActionListener(e -> { 
			MainClass.updateForButtons(text); 
			//this.setOpacity(0.4f);
			/*
			this.revalidate();
			this.repaint();
			MainClass.buttonPanel.revalidate();
			MainClass.buttonPanel.repaint();
			*/
		});
		
		// The mouse hover effect (different for the equal sign & the mode vs all other buttons
		if(text.equals("=") || text.equals("mode"))
		{
			this.setOpacity(0.9f);
			
			this.addMouseListener(new MouseAdapter() 
			{
			    public void mouseEntered(MouseEvent evt) 
			    {
			    	setBorder(BorderFactory.createLineBorder(Color.WHITE));
			    	setOpacity(1.f);
			    }

			    public void mouseExited(MouseEvent evt) 
			    {
			    	setBorder(BorderFactory.createLoweredBevelBorder());
			    	setOpacity(0.9f);
			    }
			});
		}
		else
		{
			this.setOpacity(0.2f);
			
			this.addMouseListener(new MouseAdapter() 
			{
			    public void mouseEntered(MouseEvent evt) 
			    {
			    	setBorder(BorderFactory.createLineBorder(Color.WHITE));
			    	setOpacity(0.4f);
			    }

			    public void mouseExited(MouseEvent evt) 
			    {
			    	setBorder(BorderFactory.createLoweredBevelBorder());
			    	setOpacity(0.2f);
			    }
			});
		}
	}
	
	public JComponent getButton()
	{
		return this;
	}
}
